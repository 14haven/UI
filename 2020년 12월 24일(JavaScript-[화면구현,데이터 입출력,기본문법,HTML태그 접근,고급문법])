2020년 12월 24일

화면 구현

UI 설계 확인하기
- UI 설계 내용 확인하기
- UI 메뉴 구조 확인하기

UI 구현하기
- JavaScript
- jQuery
- WEB API         



------------------------------------------------------------------------------------------------

JavaScript
클라이언트 사이드 언어
HTML,CSS와 더불어 가장 많이 사용되는 언어
다양한 동적인 기능을 구현하기 위해 사용

* JavaScript
자바스크립트(JavaScript)는 웹 브라우저에서 많이 사용되는
인터프리트 방식의 객체지향 프로그래밍 언어로
ECMA(European Computer Manufacturers Association) 스크립트 표준을
따르는 대표적인 웹 기술


* 자바스크립트 선언
HTML에서 제공하는 <script></script>태그를 사용하며
자바스크립트 작성 영역을 설정하고 그 사이에 자바스크립트 코드 작성
type 속성은 브라우저 호환성을 위해 사용되나 default값으로 생략 가능

<script type="text/javascript">
	자바스크립트 내용
</script>
(language 속성과 charset속성이 있었지만 language 속성은 폐기되고
charset 속성은 meta 태그가 적용되기 때문에 사용할 필요 없음)


<script>
</script> -> 다른 script 언어로 해석해라
javascript만 있는게 아니라 다양한 언어가 있음
어떤 스크립트언어인지 알려주기 위해 타입으로 text/javascript라고 알려줌
그러면 꺽쇠안의 내용은 javascript로 해석함
안쓰면 알아서 javascript으로 동작된다.


* 자바스크립트 위치
어디에나 써도 상관은 없지만 웹 표준과 웹접근성을 고려해 <head>나 <body>안에 작성함
 
<script>자바스크립트 내용</script>
<html>
	<head><script>자바스크립트 내용</script></head>
	<body><script>자바스크립트 내용</script></body>
</html>
<script> 자바스크립트내용</script>
한곳에만 몰아서 넣어야 하는건 아니고
스크립트가 필요한 부분에 골라서 넣으면 된다.
스크립트를 하나의 페이지에 여러개를 쓰게 됐을때 위에서부터 아래로 스크립트가 진행된다.

* 자바스크립트 작성 방식
- inline 방식 : 자바스크립트 양이 한 두 줄 정도로 소량일 때 사용
태그에 이벤트 핸들러 속성을 이용하여 직접 실행 코드 작성
- internal 방식 : 가장 일반적인 방식으로
html 파일 내 <head>나 <body> 안에 꺽쇠 script 사용해서 자바스크립트 소스 작성
- external 방식 : 자바스크립트 양이 많을 경우
별도의 파일에 자바스크립트 코드 작성해놓고
<script src="경로"> 태그를 이용해 파일을 포함해 사용하는 방법


css에도 내부, 외부 스타일방식, 인라인 방식이 있듯이

- inline 방식
html 태그의 on이벤트 속성을 이용하여 내장 메소드를 호출하거나
개발자가 선언한 사용자의 정의 함수를 호출할 때 사용                                                                                                                                                       
<태그 명 on 이벤트 = "함수명();">

- internal 방식
자바스크립트 코드 작성, 함수 단위로 소스코드를 작성하고
html 태그에서 이벤트 핸들러를 통해 함수를 실행시키는 방식
<script>실행할코드작성</script>

- external 방식
외부에 별도의 자바스크립트 소스파일(*.js)을 작성하고
html에서 <script src="경로.js">태그를 이용하여 해당 파일을 불러와
사용하는 방식으로 여러 개 html파일에서 공통적으로 사용하는
기능일 경우 많이 씀

<script src="경로"></script>


* 자바스크립트 실행 방식
컴파일 언어가 아닌 인터프리터 언어이다.
인터프리터 방식은 웹 브라우저에 내장되어 있는 자바스크립트 파서가 소스코드를 한 줄씩 읽고 해석함
전체를 해석해 놓은 컴파일 언어와는 차이가 있음
자바스크립트 실행은 작성된 html문서를 브라우저에서 읽으면
바로 실행을 할 수 있음

자바스크립트를 지원하지 않는 브라우저를 대비해 출력문구를 <noscript>에 작성
<noscript> 
	지원하지 않을 경우 출력문구
</noscript>


* 주석 처리
자바스크립트 주석
한 줄 주석 :  //로 시작
여러 줄 주석 : /* 로 시작하고 */로 끝남

HTML 주석
<!--로 시작하고 -->로 끝남
자바스크립트나 스타일시트 태그 이외의
HTML태그에서는 이 주석 태그를 사용해서 주석 처리를 해주어야 함

------------------------------------------------------------------------------------------------

데이터 입·출력

* 데이터 출력
document.write(내용);  : 브라우저 화면 상의 페이지에 값 출력
우리 문서에 써줄게
document.write("Hello");    // 문서에 출력

window.alert(내용);  : 내용을 메시지 창에 출력 (window 객체는 모두 적용되는 것으로 생략 가능)
document보다 더 큰 영역alert("HIHIHI");            // 메시지 박스 출력


innerHTML = 내용;  : 태그 엘리먼트의 내용을 변경하여 출력
특정 태그의 내용을 변경해서 태그 안에 내용을 넣을 수 있는 것


console.log(내용);  : 개발자 도구 화면의 콘솔에 출력
사용자에게는 의미 없음


* 데이터 입력
confirm(), prompt() 메소드를 사용해서 입력 받을 수 도 있고
HTML 태그에 접근해 대상의 값을 읽거나
HTML form 태그의 input 입력 양식을 통해 값을 입력 받을 수도 있음

- window.confirm()
어떤 질문에 대해 "예/아니오"의 결과를 얻을 때 사용
대화 창에 메시지와 확인, 취소 버튼 표시   (리턴 값 : 확인(true), 취소(false))

var 변수 = [window].confirm("질문내용");
confirm("자바 스크립트 공부를 하시겠습니까?");  //확인(true), 취소(flase) 값 반환


- window.prompt()
텍스트 필드와 확인/취소버튼이 있는 대화 창 출력 (리턴 값 : 입력한 내용)

var 변수 = [window.]prompt("메시지");
prompt("어떤 공부를 하고 싶으십니까?");     //입력 받은 텍스트 값 반환
입력 받은 값은 문자열로 저장됨
숫자 1을 입력하면 문자 1로 저장된다.


------------------------------------------------------------------------------------------------

기본 문법

* 변수
1. 변수 선언
변수 종류 : 멤버 변수와 지역 변수(특정 영역 안에서만 사용)
멤버 변수 : 전역 변수 , 기본적으로 window 객체의 멤버 변수
변수에 대한 자료형은 있으나 선언하지는 않음

변수명 = 값; 
자료형 안붙임, 값에 따라서 알아서 공간 만들어줌
window.변수 명 또는 this.변수명과 같은 의미
선언 시 변수 명에 var를 붙이지 않으면 전역변수(페이지 전체에서 사용가능)로 간주

var 변수명 = 값;
변수 선언 시 변수명 앞에 var를 붙이면 지역변수(특정 영역 안에서만 사용)


2. 명명 규칙
- 영어 대/소문자, 숫자, _, $ 사용 가능
- 첫 글자 숫자 사용 불가
- 예약어 사용 불가
- 한글 사용 가능(가급적이면 영어로)
- 생성자 함수는 항상 대문자로 시작
- 변수, 인스턴스, 함수, 메소드는 항상 소문자로 시작
- 이름에 의미 있는 단어의 조합 권장
- 두 단어 결합 시 낙타봉 표기법 권장 (두번째 단어부터는 첫글자를 대문자로 maxNumberChange)

3. typeof()
값의 자료형을 확인하는 연산자
선언 시 자료형을 지정하지 않아 변수 명을 보고 데이터 확인 불가
자료형 확인 시 자주 사용

싱클쿼터, 더블쿼터 상관없이 모두 문자열로 인식한다.

typeof("문자열값") 또는 typeof('문자열값') -> string
document.write("문자열1 : "+typeof("Hello")+"<br>");
document.write("문자열2 : "+typeof('hihi')+"<br>");
document.write("문자열3 : "+typeof(var1)+"<br>");
문자열1 : string
문자열2 : string
문자열3 : string

typeof(숫자) -> number
document.write("숫자1 : "+typeof(100)+"<br>");
document.write("숫자2 : "+typeof(3.5)+"<br>");
 document.write("숫자3 : "+typeof(-200)+"<br>");
숫자1 : number
숫자2 : number
숫자3 : number
숫자4 : number

typeof(참/거짓) -> boolean
document.write("참/거짓1 : "+typeof(true)+"<br>");
document.write("참/거짓2 : "+typeof(false)+"<br>");
참/거짓1 : boolean
참/거짓2 : boolean

typeof(객체) -> object

typeof(초기값이 없는 변수) -> undefined
document.write("초기값이 없는 변수 : "+typeof(var4)+"<br>");
초기값이 없는 변수 : undefined

typeof(function) -> function




4. 자료형
- 문자열(String)
"", ''로 묶여있는 리터럴

메소드
toUpperCase() : 모든 문자 대문자로 변환
toLowerCase(0 : 모든 문자 소문자로 변환
length : 글자 개수 조회용 멤버변수
indexOf() : 찾는 문자의 순번(위치) 리턴
lastIndexOf() : 뒤에서부터 찾는 문자의 순번 리턴
charAt() : 찾는 위치의 문자 리턴
substring() : 값을 일부분만 리턴
split() : 토큰 문자로 분리한 문자열 배열 리턴


document.write("## 문자열 ##<br>");
str1 = "Hello";
document.write(str1.toUpperCase()+"<br>");	// HELLO
document.write(str1.toLowerCase()+"<br>");	// hello
document.write(str1.length+"<br>");	// 5
document.write(str1.indexOf("l")+"<br>");	//2
document.write(str1.lastIndexOf("l")+"<br>");	// 3
document.write(str1.charAt(1)+"<br>");	// e
document.write(str1.substring(1,3)+"<br>"); // el,  시작위치인 1번째부터 3번째 위치 전까지 
document.write(str1.split('')+"<br>");	// H,e,l,l,o


5. 숫자(number)

메소드
Math.abs() : 절대값 리턴
Math.random() : 임의의 난수발생 리턴(소수점)
Math.round() : 반올림처리 후 리턴
Math.floor() : 부동소수점 숫자를 정수로 리턴(소수점 자리버림)
Math.ceil() : 소수점 자리에서 무조건 올림

document.write("## 숫자 ##<br>");
document.write(Math.abs(10)+"<br>");    // 10 , 절대값 추출
document.write(Math.abs(-10)+"<br>");   // 10 , 절대값 추출
document.write(Math.random()+"<br>");   // 랜덤값 추출(0 < random < 1)
document.write(Math.round(3.465)+"<br>");  // 3 , 소수점 뒤 자리 반올림
document.write(Math.round(3.65)+"<br>");    // 4, 소수점 뒤 자리 반올림
document.write(Math.floor(3.465)+"<br>");   // 3 , 소수점 뒤 자리 버림
document.write(Math.floor(3.65)+"<br>");    // 3 , 소수점 뒤 자리 버림
document.write(Math.ceil(3.465)+"<br>");    // 4 , 소수점 뒤 자리 올림
document.write(Math.ceil(3.65)+"<br>");     // 4 , 소수점 뒤 자리 올림

6. 기타 자료형
- 논리값(Boolean)
	true, false 두 가지 값을 가짐
- 객체(Object)
	new로 선언된 사용자 객체와 자바스크립트 내장 객체
- undefined
	변수 명이나 함수 명으로 선언되지 않은 식별자일때 지정
- 함수(function)
	함수(메소드)를 가지는 자료형


7. 데이터 형변환
- 숫자 -> 문자열
숫자와 문자를 + 연산하게 되면 문자가 우선되어 숫자를 문자로 변환
강제 형변환 :  String()함수 이용

- 문자열 -> 숫자
숫자, 문자 + 이외의 사칙 연산 시 숫자가 우선돼 문자를 숫자로 변환
강제 형변환 : Number(), parseInt(), parseFloat()함수 이용
(parseInt()함수는 인자가 2개로 문자열, radix(해당진수)를 선택할 수 있음)

// 데이터 형변환
document.write("## 데이터 형변환 ##<br>");
document.write(typeof(10)+"<br>");  // number
document.write(typeof("10")+"<br>");    // string
num1 = 10;
document.write(typeof(num1)+"<br>");    // number
document.write(typeof(String(num1))+"<br>");    // string
document.write(20+num1+"<br>"); // 30
document.write(20+String(num1)+"<br>"); // 2010 , 20도 string으로 바뀜
str1 = "10";
document.write(typeof(str1)+"<br>");    // string
document.write(typeof(Number(str1))+"<br>");    // number
document.write(typeof(parseInt(str1))+"<br>");  // number
document.write(typeof(parseFloat(str1))+"<br>");    // number
document.write(20+str1+"<br>");     // 2010
document.write(20+Number(num1)+"<br>"); // 30


8. 연산자

document.write("## 삼중 등호 연산자 ##<br>");
if(10 == "10"){
                document.write("숫자 10과 문자열 10은 == 같습니다<br>");
}else{
                document.write("숫자 10과 문자열 10은 == 다릅니다<br>");
            }
if(10 === "10"){
                document.write("숫자 10과 문자열 10은 === 같습니다<br>");
}else{
                document.write("숫자 10과 문자열 10은 === 다릅니다<br>");
}

결과: 
## 삼중 등호 연산자 ##
숫자 10과 문자열 10은 == 같습니다
숫자 10과 문자열 10은 === 다릅니다


// 문자열 연결 연산자
document.write("##  문자열 연결 연산자 ##<br>");
document.write("Hello"+"환영합니다<br>");
name = " 홍길동";
document.write(name+"님 환영합니다.<br>");

결과:
## 문자열 연결 연산자 ##
Hello환영합니다
홍길동님 환영합니다.


9. 제어문 (JAVA랑 똑같다고 생각하면 됨)
- 조건문
if, if~else, if~else if~else else, switch문, 짧은 조건문(&&, ||)

- 반복문
for, while, do~while, for in문(배열 편하게 쓰는 것)

- 분기문
continue, break문

// if문
num = prompt("숫자 입력 : ");
if(num > 0){
                document.write("0보다 큰 수 입력<br>");
}else if(num < 0){
                document.write("0보다 작은 수 입력<br>");
}else{
                document.write("0과 같은 수 입력<br>");
	}

// switch문
document.write(typeof(num)+"<br>");
prompt에서 입력받은 숫자는 문자로 저장된다.
따라서 num과 비교하기 위해서는 형변환을 해주거나 
문자와 문자를 비교하는 식으로 만들어줘야 한다.
switch(num){
                case "1" :  document.write("1 입력<br>");
                    break;
                case "2" :document.write("2 입력<br>");
                    break;
                case "3" :document.write("3 입력<br>");
                    break;
                default :
                    document.write("기타 입력<br>");
	}

// for문
비교문에서는 자동 형변환이 되어서 따로 형변환을 해주지 않아도 된다.
            for(i=0; i<num ; i++){
                document.write(i+1+"번째 반복<br>");
            }
prompt에 5 입력시 결과:
1번째 반복
2번째 반복
3번째 반복
4번째 반복
5번째 반복

// while문
            i=0;
            while(i<num){
                document.write(i+1+"번째 반복<br>");
                i++;
            }
prompt에 5 입력시 결과:
1번째 반복
2번째 반복
3번째 반복
4번째 반복
5번째 반복

------------------------------------------------------------------------------------------------

HTML 태그 접근

* 메소드
getElementById("아이디명") : 태그의 id 속성 값을 이용해 태그 엘리먼트 객체의 정보를 가져옴
HTML에서 붙여놨던 id를 불러서 사용
getElementsByName("이름") : 태그의 name 속성 값을 이요해 태그 엘리먼트의 객체 정보를 배열에 담아 가져옴
같은 이름의 태그가 여러 개 존재할 수 있기 때문에 기본적으로 배열로 리턴
getElementsByTagName("태그명") : 태그 명을 이용하여 해당 태그들의 객체 정보를 배열에 담아 가져옴

- document.getElementById()
HTML태그의 id속성 값은 페이지에서 유일한 식별자 역할을 하도록 권장
리턴 값 : 단일 값(id는 중복 허용 안 함)

var 변수 = document.getElementById("아이디명");
변수는 객체를 의미하는 레퍼런스 변수


    <head>
        <title>JS TEST</title>
    </head>
    <body>
        <h1>JAVA SCRIPT TEST</h1>
        <hr>
        <div id="d1">
            <h3 id="dh1" class="d1class">div1 영역</h3>
            <p id="dp1" class="d1class" name="pp">안녕하세요</p>
        </div>
        <div id="d2">
            <h3 id="dh2">div2 영역</h3>
            <p id="dp2" name="pp">반갑습니다.</p>
        </div>
        <hr>
        <script>
            var1 = document.getElementById("d1");
            document.write(var1+"<br>");    // [object HTMLDivElement]
            var2 = document.getElementById("dh1");
            document.write(var2+"<br>");    // [object HTMLHeadingElement]
            var3 = document.getElementById("dp1");
            document.write(var3+"<br>");    // [object HTMLParagraphElement]
            document.write(var1.innerHTML);
            alert("[div1 HTML] : "+var1.innerHTML);
            alert("[div1 > h3 HTML] : "+var2.innerHTML);
            alert("[div1 > p HTML] : "+var3.innerHTML);
            alert("[div1 TEXT] : "+var1.innerText);
        </script>

alert(var1.innerHTML);
alert는 해석안하고 바로 가져와서 띄워줌

innerText => 태그들 제외한 실제 데이터들만 가져오겠다.
innerHTML => 태그들도 다 같이 가져오겠다.


- document.getElementsByName()
HTML태그의 name 속성 값으로 객체 정보를 가져올 때 사용
리턴 값 : 배열(name은 중복 가능)
a라는 name을 가진 요소 가져와 하면 여러개 가져올 수 있다.

var 변수 = document.getElementsByName("이름");
변수는 배열이 됨

var4 = document.getElementsByName("pp");
document.write(var4+"<br>");    // [object NodeList]
document.write(var4[0]+"<br>"); // [object HTMLParagraphElement]
document.write("0번째 pp : "+var4[0].innerHTML+"<br>"); // 0번째 pp : 안녕하세요
document.write("1번째 pp : "+var4[1].innerHTML+"<br>"); // 1번째 pp : 반갑습니다.



- document.getElementsByTagName()
HTML태그의 태그 명을 이용해 태그들을 한꺼번에 가져와 순서대로 반환
리턴 값 : 배열(태그 중복 가능)

var5 = document.getElementsByTagName("h3");
document.write(var5+"<br>");    // [object HTMLCollection]
document.write(var5[0]+"<br>"); // [object HTMLHeadingElement]
document.write("0번째 h3 : "+var5[0].innerHTML+"<br>"); // 0번째 h3 : div1 영역
document.write("1번째 h3 : "+var5[1].innerHTML+"<br>"); // 1번째 h3 : div2 영역


var 변수 = document.getElementsByTagName("태그 명");
변수는 배열이 됨


- document.getElementsByClassName()
HTML태그의 클래스 명을 이용해 태그들을 한꺼번에 가져와 순서대로 반환

var6 = document.getElementsByClassName("d1class");
document.write(var6+"<br>");    // [object HTMLCollection]
document.write(var6[0]+"<br>"); // [object HTMLHeadingElement]
document.write("0번째 d1class : "+var6[0].innerHTML+"<br>");    // 0번째 d1class : div1 영역
document.write("1번째 d1class : "+var6[1].innerHTML+"<br>");    // 1번째 d1class : 안녕하세요



document.write("변경 전 : "+var3.innerHTML+"<br>"); // 변경 전 : 안녕하세요
var3.innerHTML = "하하하하";
document.write("변경 후 : "+var3.innerHTML+"<br>"); // 변경 후 : 하하하하
-> 실제로 내용이 바뀐다.



------------------------------------------------------------------------------------------------

JAVASCRIPT 고급 문법

배열
자바에서 사용하는 배열과 같은 개념
여러개의 데이터를 묶어서 사용하기 위한 것
단지 차이점은 자바스크립트는 변수 만들 때 신경 안씀


*배열
다양한 타입의 데이터를 보관하는 변수 모음으로
[]를 통해 생성과 초기화를 동시에 처리 가능
자료형 지정이 없어 모든 자료형 데이터로 저장 가능
(모든 자료형 : 숫자, 문자열, 함수, Boolean, undefined, 객체)

var 변수 명 = [값1(숫자), 값2(문자), 값3(객체), 함수 ...];
var은 지역으로 만들건지 전역으로 만들건지에 따라 적어줘도 되고 안적어도 된다.

* 배열 선언
new연산자와 Array객체를 통한 배열 선언

크기를 정하지 않은 배열 선언 : var 변수 명 = new Array();
크기를 정한 배열 선언 : var 변수 명 = new Array(개수);

* 배열 초기화
new 연산자를 활용한 초기화
var 배열변수 = new Array(값1, 값2, 값3, ..., 값n);

[]를 활용한 초기화
var 배열변수 = [값1, 값2, 값3, ..., 값n];


선언을 해놓고 쓰는 개념이 아니기 때문에
통째로 초기화 하는거 몇번이고 할 수 있다.
변수 값이 없으면 undefined 뜸

* 배열에 값 대입
값 입력 시 index번호 활용 * 번호 범위 : 0 ~ (지정 크기-1)

배열에 값 대입 : 배열[첨자] = 값;
변수에 배열 값 대입 : 변수 = 배열[첨자];

        <script>
            document.write("## 배열 사용 1 <br>");
            arr1 = [10,3.5,"hello"]
            document.write(arr1+"<br>");    // 10,3.5,hello
            document.write(arr1[0]+"<br>"); // 10
            document.write(arr1[1]+"<br>"); // 3.5
            document.write(arr1[2]+"<br>"); // hello
            document.write(arr1[3]+"<br>"); // undefined
            arr1 = [20,5.5,30];
            document.write(arr1+"<br>");    // 20,5.5,30
            arr1[1] = "안녕";
            document.write(arr1+"<br>");    // 20,안녕,30
            arr1[4] = "추가";
            document.write(arr1+"<br>");    // 20,안녕,30,,추가
            arr1[7] = "추가2";
            document.write(arr1+"<br>");    // 20,안녕,30,,추가,,,추가2

            document.write("<hr>## 배열 사용 2 <br>");
            arr2 = new Array(); // 아무런 값 없는 상태로 초기화
            document.write(arr2+"<br>");    // 공백 (공간 자체가 안만들어짐)
            document.write(arr2[0]+"<br>"); // undefined
            arr2[0] = 10;
            arr2[1] = 20;
            document.write(arr2+"<br>");    // 10,20

            document.write("<hr>## 배열 사용 3 <br>");
            arr3 = new Array(3);    // 갯수 지정 
            document.write(arr3+"<br>");    // ,, (공간은 만들어짐)
            document.write(arr3[0]+"<br>"); // undefined
            arr3[0] = 1;
            arr3[1] = 2;
            document.write(arr3+"<br>");    // 1,2,


            document.write("<hr>## 배열 사용 4 <br>");
            arr4 = new Array(5,1.6,"HI");    
            document.write(arr4+"<br>");    // 5,1.6,HI
            document.write(arr4[0]+"<br>"); // 5
            document.write(arr4[1]+"<br>"); // 1.6
            document.write(arr4[2]+"<br>"); // HI
        </script>



* Array 객체 메소드
Array도 하나의 객체이기 때문에 배열에서 활용할 수 있는 메소드가 있음


배열명.indexOf("값") : 배열에서 요소가 위치한 인덱스 리턴
배열명.concat(배열명) : 두 개 또는 세 개의 배열을 결합
배열명.join() : 배열을 결합하고 문자열로 반환
배열명.reverse() : 배열의 순서를 뒤집음
배열명.sort() : 배열을 내림차순/오름차순 정렬
배열명.push('값') : 배열의 맨 뒤에 요소 추가
배열명.pop() : 배열의 맨 뒤에 요소 제거
배열명.shift() : 배열에서 첫 번째 요소 제거
배열명.slice(숫자,숫자) : 배열의 요소 선택 잘라내기
배열명.splice([index], 제거 수, 추가 값) : 배열의 index 위치의 요소 제거, 추가
배열명.toString() : 배열을 문자열로 반환
배열명.unshift('값') : 배열의 앞에 새로운 요소 추가

	document.write("<hr>## 배열 사용 5 - indexOf() <br>");
            // indexOf() - 문자열로 검색해서 처음 나오는 위치를 반환
            fruits = ['바나나','딸기','복숭아','수박'];
            document.write(fruits+"<br>"); // 바나나,딸기,복숭아,수박
            document.write(fruits.indexOf('딸기')+"번째 위치<br>");    // 1번째 위치


            document.write("<hr>## 배열 사용 6 - concat() <br>");
            // concat() - 여러 배열들을 결합할 때 사용
            arr1 = ['사과','딸기','바나나'];
            arr2 = ['복숭아','키위','파인애플'];
            arr3 = [10,20,30,40];
            data = arr1.concat(arr2,arr3);
            document.write(data+"<br>");   // 사과,딸기,바나나,복숭아,키위,파인애플,10,20,30,40


            document.write("<hr>## 배열 사용 7 - join() <br>");
            // join('구분자') - 배열 안에 있는 요소들을 하나의 문자열로 만들어서 반환
            // join 함수의 구분자를 중간에 넣어서 묶어줌
            arr1 = ['사과','딸기','바나나'];
            arr2 = ['복숭아','키위','파인애플'];
            arr3 = [10,20,30,40];
            data1 = arr1.join('');
            document.write(data1+"<br>");   // 사과딸기바나나 (콤마로 구분돼있던 것 하나의 문자열로)
            data2 = arr1.concat(arr2, arr3).join('/');  // concat으로 먼저 합쳐준 다음에 join
            document.write(data2+"<br>");   // 사과/딸기/바나나/복숭아/키위/파인애플/10/20/30/40


            document.write("<hr>## 배열 사용 8 - reverse() <br>");
            // reverse() - 배열의 요소들을 만대로 만들어 줌
            arr1 = [1,2,4,7,3,5];
            document.write(arr1+"<br>");    // 1,2,4,7,3,5
            arr1.reverse();
            document.write(arr1+"<br>");    // 5,3,7,4,2,1


            document.write("<hr>## 배열 사용 9 - sort() <br>");
            // sort() - 오름차순으로 정렬
            arr1 = [1,2,4,7,3,5];
            document.write(arr1+"<br>");    // 1,2,4,7,3,5
            arr1.sort();
            document.write(arr1+"<br>");    // 1,2,3,4,5,7
            arr1 = [1,2,4,7,3,5,"hi","abcd",10];
            document.write(arr1+"<br>");    // 1,2,4,7,3,5,hi,abcd,10
            arr1.sort();    // 문자열이 있을 시 모든걸 문자열로 바꿔서 정렬하게 됨
            document.write(arr1+"<br>");    // 1,10,2,3,4,5,7,abcd,hi
            arr1.sort((a,b)=>a-b);  // 오름차순
            document.write(arr1+"<br>");    // 1,2,3,4,5,7,10,abcd,hi
            arr1.sort((a,b)=>b-a);  // 내림차순
            document.write(arr1+"<br>");    // 10,7,5,4,3,2,1,abcd,hi
            

            document.write("<hr>## 배열 사용 10 - push() <br>");
            // push('값') - 배열의 마지막에 데이터 추가
            arr1 = ['사과','딸기','바나나'];
            document.write(arr1+"<br>");    // 사과,딸기,바나나
            arr1.push('파인애플');  // 데이터 추가하고 싶은데 데이터가 몇개 들어있는지 모를때 push 사용
            document.write(arr1+"<br>");    // 사과,딸기,바나나,파인애플


            document.write("<hr>## 배열 사용 11 - pop() <br>");
            // pop() -  배열의 마지막 데이터 꺼내오기
            // 마지막 데이터를 반환하고 배열에서는 삭제
            arr1 = ['사과','딸기','바나나'];
            document.write(arr1+"<br>");    // 사과,딸기,바나나
            document.write(arr1.pop()+"<br>");  // 바나나
            document.write(arr1+"<br>");    // 사과,딸기 


            document.write("<hr>## 배열 사용 12 - shift() <br>");
            // shift() - 배열의 첫번째 데이터 꺼내오기
            // 첫번째 데이터를 반환하고 배열에서는 삭제
            arr1 = ['사과','딸기','바나나'];
            document.write(arr1+"<br>");    // 사과,딸기,바나나
            document.write(arr1.shift()+"<br>");  // 사과
            document.write(arr1+"<br>");    // 딸기,바나나


            document.write("<hr>## 배열 사용 13 - unshift() <br>");
            // unshift('값') - 배열의 첫번째에 데이터 추가
            arr1 = ['사과','딸기','바나나'];
            document.write(arr1+"<br>");    // 사과,딸기,바나나
            arr1.unshift('파인애플');  
            document.write(arr1+"<br>");    // 파인애플,사과,딸기,바나나
            

            document.write("<hr>## 배열 사용 14 - slice() <br>");
            // slice(시작인덱스[,종료인덱스]) - 배열의 시작인덱스부터 종료인덱스 전까지 데이터 반환
            // 종료인덱스를 생략하면 배열의 끝까지 반환
            arr1 = ['사과','딸기','바나나','파인애플','석류','귤','망고'];
            document.write(arr1+"<br>");    // 사과,딸기,바나나,파인애플,석류,귤,망고
            document.write(arr1.slice(2)+"<br>");  // 바나나,파인애플,석류,귤,망고
            document.write(arr1+"<br>");    // 사과,딸기,바나나,파인애플,석류,귤,망고
            document.write(arr1.slice(2,4)+"<br>");    // 바나나,파인애플


            document.write("<hr>## 배열 사용 15 - splice() <br>");
            // splice(인덱스,제거수[,추가값])
            arr1 = ['사과','딸기','바나나','파인애플','석류','귤','망고'];
            document.write(arr1+"<br>");    // 사과,딸기,바나나,파인애플,석류,귤,망고
            document.write(arr1.splice(2,2)+"<br>");    // 바나나,파인애플
            document.write(arr1+"<br>");    // 사과,딸기,석류,귤,망고
            document.write(arr1.splice(1,1,"감","참외")+"<br>");   // 딸기가 삭제되고 감,참외 추가됨
            document.write(arr1+"<br>");    // 사과,감,참외,석류,귤,망고


            document.write("<hr>## 배열 사용 16 - toString() <br>");
            // toString() - 배열의 내용을 문자열 형태로 반환
            arr1 = ['사과','딸기','바나나','파인애플','석류','귤','망고'];
            document.write(arr1+"<br>");    // 사과,딸기,바나나,파인애플,석류,귤,망고
            document.write(arr1.toString()+"<br>"); // 사과,딸기,바나나,파인애플,석류,귤,망고  , 배열 안의 값을 문자 열의 형태로 가져옴
            document.write(typeof(arr1)+"<br>");    // object
            document.write(typeof(arr1.toString())+"<br>"); // string


* sort() 메소드
문자열 기준 오름차순으로 정렬하며 정렬 방법에 변화를 주고 싶을 땐
sort() 인자에 함수를 설정하면 됨
매개변수로 들어가는 함수에는 기본 2개의 매개변수를 설정할 수 있음

배열변수.sort(function(left, right){
	return left-right; // 오름차순;
	또는
	return right-left; // 내림차순
};



       <h1>JAVA SCRIPT TEST</h1>
        <hr>
        <!-- inline 방식 -->
        <button onclick="javascript:alert('hello');">눌러보세요</button>
        <hr>
        <!-- internal 방식 -->
        <script>
            document.write("안녕하세요");
        </script>
        <hr>
        <!-- external 방식 --> (jstest07.js 파일 따로 만들어서 작성)
        <script src="jstest07.js"></script>


나는 이렇게 하기 싫고
script안에 내용을 만들어 놓긴 놓을건데
특정 이벤트를 했을때 (버튼을 눌른다던지, 값을 입력을 한다던지) 실행이 되도록 하고 싶어
<!DOCTYPE html>
<html>
    <head>
        <title>JS TEST</title>
    </head>
    <body>
        <h1>JAVA SCRIPT TEST</h1>
        <hr>
        <!-- 버튼 1 눌렀을때 func1 실행해라 -->
        <button onclick="func1()">버튼1</button> 
        <hr>
        <button id="btn2">버튼2</button>
        <hr>
        <div id="d1"></div>
        <button onclick="func3()">버튼3</button>
        <hr>
        <div id="d2">
            <p class="pp">사과</p>
            <p class="pp">딸기</p>
            <p class="pp">오렌지</p>
        </div>
        <button onclick="fucn4()">버튼4</button>
        <div id="d3"></div>
        <script>
            function func1(){
                alert('안녕하세요');
            }
            // window는 브라우저 창을 이야기하고, onload는 브라우저가 로딩이 완료되었을 때를 말함
            // window.onload 문서 싹다 읽은 후 실행해라
            window.onload = function func2(){ 
                document.getElementById('btn2').onclick = function(){
                    alert('반갑습니다.');
                }
            }
            function func3(){
                document.getElementById('d1').innerHTML ="<h3>자바스크립트 공부합시다</h3>";
            }
            function fucn4(){
                var1 = prompt("좋아하는 과일을 입력하세요");
                arr1 = document.getElementsByClassName('pp');
                arr2 = new Array();
                for(i=0; i< arr1.length; i++){
                    arr2[i] = arr1[i].innerHTML;
                }
                index = arr2.indexOf(var1);
                if(index >= 0){
                    document.getElementById('d3').innerHTML = index+1+"번째 위치에 과일이 있습니다.";
                }else{
                    document.getElementById('d3').innerHTML = "해당 과일이 없습니다.";
                }
            }
        </script>
        
    </body>
</html>



w3schools 안에 javascript, jQuery도 있음 
