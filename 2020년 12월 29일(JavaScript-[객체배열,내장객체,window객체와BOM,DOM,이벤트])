2020년 12월 29일

객체 배열
생성된 객체를 배열에 넣어 활용 가능
var 변수 명 = [ ]; // 배열 생성
데이터 대입 : 변수 명.push({속성 명: "값", 속성 명: "값", ...});

<!DOCTYPE html>
<html>
    <head>
        <title>객체</title>
        <style>
            .area-big{
                height: 300px;
                background-color: lightgray;
                border: 1px solid black;
            }
            .area{
                height: 200px;
                background-color: lightgray;
                border: 1px solid black;
            }
        </style>
    </head>
    <body>
        <h1>객체</h1>
        <hr>
        <h3>객체 배열</h3>
        <button onclick="test1();">실행확인</button>
        <div id="area1" class="area"></div>
        <script>
            function test1(){
                var student0 = {
                    name: '홍길동',
                    kor: 40,
                    eng: 30,
                    math: 50
                };
                var student1 = {
                    name: '임꺽정',
                    kor: 80,
                    eng: 60,
                    math: 40
                };
                var student2 = {
                    name: '향단이',
                    kor: 60,
                    eng: 80,
                    math: 50
                };

                // 배열 선언
                var students = [];

                // 배열에 값 추가
                students.push(student0);
                students.push(student1);
                students.push(student2);

                // 배열 내 각 객체별 메소드 추가
                for(var i=0; i<students.length ; i++){
                    students[i].getSum = function(){
                        return this.kor+this.eng+this.math;
                    }
                    students[i].getAvg = function(){
                        return this.getSum() / 3;
                    }
                }
                // 브라우저 개발자 도구의 console 창에 출력
                    // 변수값 확인 시 유용하게 활용 가능
                console.log(students); // 객체 안에 있는 내용 확인하고 싶을 때

                // 배열 내 객체값 화면에 출력
                var area1 = document.getElementById('area1');
                for(var i in students){
                    with(students[i]){
                        area1.innerHTML += "이름 : "+name
                            +", 국어 : "+kor+", 영어 : "+eng+", 수학 : "+math
                            +", 총점 : "+getSum()+", 평균 : "+getAvg().toFixed(1)+"<br>";

                    }

                }
            }
        </script>
        <h3>함수를 활용하여 객체 생성</h3>
        <fieldset>
            <legend>회원 정보 입력</legend>
            <label for="name">이름 : </label>
            <input type="text" id="name"><br>
            <label for="age">나이 : </label>
            <input type="text" id="age"><br>
            <label for="tel">전화번호 : </label>
            <input type="text" id="tel"><br>
            <button onclick="insert();">데이터 입력</button>
            <button onclick="print();">데이터 출력</button>
        </fieldset>
        <div id="area2" class="area"></div>
        <script>
            memberArr = new Array();
            function insert(){
                // 입력칸(input) 요소 가져오기
                var nameElement = document.getElementById('name');
                var ageElement = document.getElementById('age');
                var telElement = document.getElementById('tel');
              
            // // insert() 함수에서 직접 객체 생성 후 배열에 저장
            //     // 각 요소에 입력된 값을 이용해 객체 생성
            //     var member = {
            //         name: nameElement.value,
            //         age: ageElement.value,
            //         tel: telElement.value
            //     };
            //     // 생성된 객체를 배열에 저장
            //     memberArr.push(member);
            
            // 객체 생성 함수 활용
                memberArr.push(
                    createMember(nameElement.value, ageElement.value, telElement.value));

                // 콘솔에 출력
                console.log(memberArr);

                // 데이터 입력 후 입력칸 비우기
                nameElement.value="";
                ageElement.value="";
                telElement.value="";
            }
            // 객체 생성 함수
            function createMember(name,age,tel){
                var member = { name: name, age: age, tel: tel };
                return member;
            }
            function print(){
                var area2 = document.getElementById('area2');
                for(var i=0 ;  i<memberArr.length ; i++){
                    with(memberArr[i]){
                        area2.innerHTML += 
                            "이름 : "+name+", 나이 : "+age+", 전화번호 : "+tel+"<br>";
                    }
                }
            }
        </script>
    </body>
</html>

---------------------------------------------------------------------------------------------------

내장 객체
자바스크립트 안에 만들어져있는 객체들

Object 객체
모든 기본 내장 객체는 Object 객체를 상속(자바의 Object 객체와 비슷)
모든 객체는 기본적으로 Object의 메소드를 다 가지고 있음

var object = {}; (속성을 아무것도 안적어주면 object 객체로 만들어진다.)
var object = new Object();

* String 객체 HTML 관련 메소드

메소드
anchor() : <a> 태그로 감싸서 리턴
big() : <big> 태그로 감싸서 리턴
blink() : <blink> 태그로 감싸서 리턴
bold() : <b> 태그로 감싸서 리턴
fontcolor(색상) : <font> 태그로 감싸고 color 속성 주고 리턴
fontsize(크기) :  <font> 태그로 감싸고 size 속성 주고 리턴
italics() : <i> 태그로 감싸서 리턴
link(연결위치) : <a> 태그로 감싸서 href 속성 주고 리턴
small() : <small> 태그로 감싸서 리턴
strike() : <strike> 태그로 감싸서 리턴
sub() : <sub> 태그로 감싸서 리턴
sup() : <sup> 태그로 감싸서 리턴

<!DOCTYPE html>
<html>
    <head>
        <title>내장객체</title>
        <style>
            .area-big{
                height: 300px;
                background-color: lightgray;
                border: 1px solid black;
            }
            .area{
                height: 200px;
                background-color: lightgray;
                border: 1px solid black;
            }
        </style>
    </head>
    <body>
        <h1>내장객체</h1>
        <hr>
        <h3>Object 객체</h3>
        <script>
            var obj1 = {};
            var obj2 = { name: '홍길동', 
            toString: function(){ // toString 오버라이딩 가능
                return "name : "+this.name;
            }
        };
            var obj3 = new Object();
            console.log(obj1);
            console.log(obj2);
            console.log(obj3);
            document.write(obj2.toString()+"<br>");
            document.write(obj2);
        </script>
        <hr>
        <h3>String객체의 HTML관련 메소드</h3>
        <button onclick="test1();">실행확인</button>
        <div id="area1" class="area-big"></div>
        <script>
            function test1(){
                var str = "javascript";
                var area1 = document.getElementById('area1');
                
                area1.innerHTML += "기본값 : "+str+"<br>";
                area1.innerHTML += "anchor() : "+str.anchor()+"<br>";
                area1.innerHTML += "big() : "+str.big()+"<br>";
                area1.innerHTML += "bold() : "+str.bold()+"<br>";
                area1.innerHTML += "fontcolor('red') : "+str.fontcolor('red')+"<br>";
                area1.innerHTML += "fontsize(20) : "+str.fontsize(20)+"<br>";
                area1.innerHTML += "italics() : "+str.italics()+"<br>";
                area1.innerHTML += "link() : "+str.link('http://www.naver.com')+"<br>";
                area1.innerHTML += "small() : "+str.small()+"<br>";
                area1.innerHTML += "strike() : "+str.strike()+"<br>";
                area1.innerHTML += "sub() : "+str.sub()+"<br>";
                area1.innerHTML += "sup() : "+str.sup()+"<br>";
            }
        </script>
 </body>
</html>


* Number 객체
정수, 실수를 저장하는 객체
 
var num = 숫자;
var num = new Number(숫자); (Number라는 객체 만들면서 저장)

메소드
toExponential() : 숫자를 지수 표시로 나타내는 문자열
toFixed() : 숫자를 고정 소수점 표시로 나타낸 문자열
toPrecision() : 숫자를 길이에 따라 지수표시 또는 고정 소수점 표시로 나타낸 문자열


- Number 속성
MAX_VALUE : 자바스크립트가 나타낼 수 있는 최대숫자
MIN_VALUE :  자바스크립트가 나타낼 수 있는 최소 숫자
NaN : 자바스크립트의 숫자로 나타낼 수 없는 숫자
NEGATIVE_INFINITY : 음의 무한대 숫자
POSITIVE_INFINITY : 양의 무한대 숫자

<!DOCTYPE html>
<html>
    <head>
        <title>내장객체</title>
        <style>
            .area-big{
                height: 300px;
                background-color: lightgray;
                border: 1px solid black;
            }
            .area{
                height: 200px;
                background-color: lightgray;
                border: 1px solid black;
            }
        </style>
    </head>
    <body>
 <hr>
        <h3>Number 객체</h3>
        <button onclick="test2();">실행 확인</button>
        <div id='area2' class='area-big'></div>
        <script>
            function test2(){
                var num1 = 123.456789;
                var num2 = 123;
                var area2 = document.getElementById('area2');

                area2.innerHTML += "num1의 기본값 : "+num1+"<br>";
                area2.innerHTML += "num2의 기본값 : "+num2+"<br>";
                // toExponential() : 숫자를 지수 표시로 나타내는 문자열
                area2.innerHTML += "num1.toExponential() : "+num1.toExponential()+"<br>";
                area2.innerHTML += "num2.toExponential() : "+num2.toExponential()+"<br>";
                // toFixed() : 숫자를 고정 소수점 표시로 나타낸 문자열
                area2.innerHTML += "num1.toFixed() : "+num1.toFixed()+"<br>";
                area2.innerHTML += "num2.toFixed() : "+num2.toFixed()+"<br>";
                area2.innerHTML += "num1.toFixed(2) : "+num1.toFixed(2)+"<br>";
                area2.innerHTML += "num2.toFixed(2) : "+num2.toFixed(2)+"<br>";
                // toPrecision() : 숫자를 길이에 따라 지수표시 또는 고정 소수점 표시로 나타낸 문자열
                area2.innerHTML += "num1.toPrecision() : "+num1.toPrecision()+"<br>";
                area2.innerHTML += "num2.toPrecision() : "+num2.toPrecision()+"<br>";
                // MAX_VALUE : 자바스크립트가 나타낼 수 있는 최대숫자
                area2.innerHTML += "Number.MAX_VALUE : "+Number.MAX_VALUE+"<br>";
                // MIN_VALUE :  자바스크립트가 나타낼 수 있는 최소 숫자
                area2.innerHTML += "Number.MIN_VALUE : "+Number.MIN_VALUE+"<br>";
                // NaN : 자바스크립트의 숫자로 나타낼 수 없는 숫자
                area2.innerHTML += "Number.NaN : "+Number.NaN+"<br>";
                // NEGATIVE_INFINITY : 음의 무한대 숫자
                area2.innerHTML += "Number.POSITIVE_INFINITY : "+Number.POSITIVE_INFINITY+"<br>";
                // POSITIVE_INFINITY : 양의 무한대 숫자
                area2.innerHTML += "Number.NEGATIVE_INFINITY : "+Number.NEGATIVE_INFINITY+"<br>";
            }
        </script>
    </body>
</html>



* Date 객체
날짜를 관리하는 객체

var date = new Date(); // 현재 날짜 시간
var date = new Date('월 일');
var date = new Date('월 일, 년도');
var date = new Date('월 일, 년도 시간(시:분:초)');


- 메소드
get/setFullYear() : 년도 반환 / 년도 저장
get/setMonth() : 월 (0:1월 ~ 11:12월)
get/setDate() : 일(1일 ~ 31일)
get/setDay() : 요일(0:일요일 ~ 6:토요일)
get/setHours() : 시간(0~23시)
get/setMinutes() : 분(0~59분)
get/setSeconds() : 초 
get/setMilliseconds() : 밀리세컨초(0~999)
getTimezoneOffset() : 표준시와 현재지역 차이 
get/setTime() : 1970-01-01 자정 기준으로 밀리세컨드


<!DOCTYPE html>
<html>
    <head>
        <title>내장객체</title>
        <style>
            .area-big{
                height: 300px;
                background-color: lightgray;
                border: 1px solid black;
            }
            .area{
                height: 200px;
                background-color: lightgray;
                border: 1px solid black;
            }
        </style>
    </head>
    <body>
        <hr>
        <h3>Date 객체</h3>
        <button onclick="test3();">실행 확인</button>
        <div id="area3" class="area"></div>
        <script>
            function test3(){
                var area3 = document.getElementById('area3');
                
                var date1 = new Date(); // 현재 시간 가져오는 방법
                var date2 = new Date('January 15'); // 날짜 지정
                var date3 = new Date('January 15, 2020'); // 년도까지 지정
                var date4 = new Date('January 15, 2020 17:30:23'); // 시간까지 지정
                var date5 = new Date(2019,5,20,6,30,20); 
                // new Date(년,월,[,일,시,분,초,밀리초]);
                    // 년도 : 0~99 까지는 1900~1999 로 처리
                    // 월 - 0부터 시작

                area3.innerHTML += "Date() : "+date1+"<br>";
                area3.innerHTML += "Date('January 15') : "+date2+"<br>";
                area3.innerHTML += "Date('January 15, 2020') : "+date3+"<br>";
                area3.innerHTML += "Date('January 15, 2020 17:30:23') : "+date4+"<br>";
                area3.innerHTML += "Date(2019,5,20,6,30,20) : "+date5+"<br>";
            }
        </script>
        <hr>
        <h3>Date 객체의 메소드</h3>
        <button onclick="test4();">실행 확인</button>
        <div id="area4" class="area-big"></div>
        <script>
            function test4(){
                var date = new Date();
                var area4 = document.getElementById('area4');

                area4.innerHTML += "getFullYear() : "+date.getFullYear()+"<br>"; // 년도 가져오기
                area4.innerHTML += "getMonth() : "+date.getMonth()+"<br>"; // 월 가져오기
                area4.innerHTML += "getDate() : "+date.getDate()+"<br>"; // 날짜 가져오기
                area4.innerHTML += "getHours() : "+date.getHours()+"<br>"; // 시간 가져오기
                area4.innerHTML += "getMinutes() : "+date.getMinutes()+"<br>"; // 분 가져오기
                area4.innerHTML += "getSeconds() : "+date.getSeconds()+"<br>"; // 초 가져오기
                area4.innerHTML += "getMilliseconds() : "+date.getMilliseconds()+"<br>"; // 밀리초 가져오기
                // 타임 스탬프 : 1970년 1월1일 자정부터 현재까지의 시간을 밀리초단위로 환산
                area4.innerHTML += "getTime() : "+date.getTime()+"<br>";
                
                // 날짜 사이의 간격 구하기
                var start = new Date(2020,9,20);
                var now = new Date();
                var interval = now.getTime() - start.getTime();
                // 밀리초를 일 수로 계산 
                interval = Math.floor(interval / (1000 * 60 * 60 * 24));
                area4.innerHTML += "개강일부터 현재까지 일수 : "+interval+"<br>";
            }
        </script>
    </body>
</html>


---------------------------------------------------------------------------------------------------


window객체와 BOM

window객체
BOM(Browser Object Model)
DOM(Document Object Model)


* BOM(Browser Object Model)

BOM : 브라우저 자체를 제어하기 위한 객체
DOM : 하나의 문서를 제어하기 위한 객체


window객체

* window 객체
브라우저 창에 대한 설정을 하는 객체로 자바스크립트에서의 최상위 객체
생성되는 모든 객체는 window객체 하위에 존재

window.open('주소', '이름 또는 open방식', '형태');
-> 윈도우 브라우저 창 하나를 열어줌

- 형태 옵션
height, width, location, menubar, resizable, status, toolbar
window객체형태옵션 캡쳐 추가


- window 객체 메소드
moveBy(x,y) : 윈도우 위치조정(상대)
moveTo(x,y) : 윈도우 위치조정(절대)
resizeBy(x,y) : 윈도우 크기조정(상대)
resizeTo(x,y) : 윈도우 크기조정(절대)
scrollBy(x,y) : 스크롤 위치이동(상대)
scrollTo(x,y) : 스크롤 위치이동(절대)
focus() : 윈도우에 초점 맞춤
blur() : 윈도우에 초점 제거
close() : 윈도우 닫기
setTimeout(함수, 시간(ms)) : 일정시간 후 함수를 한번 실행 / id값 리턴
setInterval(함수, 시간(ms)) : 일정시간마다 함수를 반복 실행 / id값 리턴
clearTimeout(id) : setTimeout() 함수 실행 종료
clearInterval(id) : setInterval() 함수 종료

<!DOCTYPE html>
<html>
    <head>
        <title>Window 객체</title>
        <style>
            .area-big{
                height: 300px;
                background-color: lightgray;
                border: 1px solid black;
            }
            .area{
                height: 200px;
                background-color: lightgray;
                border: 1px solid black;
            }
        </style>
    </head>
    <body>
        <h1>Window 객체</h1>
        <p>Window객체는 자바스크립트의 최상위 객체<br>
            BOM(Browser Object Model), DOM(Document Object Model)로 나눠짐
        </p>
        <hr>
        <h3>Window.open()</h3>
        <button onclick="test1();">네이버</button>
        <button onclick="test2();">네이트</button>
        <script>
            function test1(){
                // window.open('주소', '이름 또는 open방식', '형태');
                window.open('http://www.naver.com','네이버', 
                'location=0, resizeable=0, menubar=0, status=0, toolbar=0');
            }
            function test2(){
                window.open('http://www.nate.com','location=no, width=100px',false);
            }
        </script>
        <hr>

        <h3>Window객체의 timer 메소드</h3>
        <h4>setTimeout()</h4>
        <button onclick="test3();">실행 확인</button>
        <script>
            function test3(){
                var myWindow = window.open();
                myWindow.alert('3초 후에 이 페이지는 종료됩니다.');
                window.setTimeout(function(){
                    myWindow.close();
                }, 3000);
            }
        </script>

        <h4>setInterval()</h4>
        <button onclick="test4();">실행 확인</button>
        <div id="area4" class='area'></div>
        <script>
            function test4(){
                var area4 = document.getElementById('area4');

                window.setInterval(function(){
                    var date = new Date();
                    area4.innerHTML = date.getHours()+" : "+date.getMinutes()
                    +" : "+date.getSeconds(); 
                },1000);
            }
        </script>

        <h4>clearInterval()</h4>
        <button onclick="test5();">실행 확인</button>
        <div id="area5" class="area"></div>
        <script>
            function test5(){
                var count = 10;
                var area5= document.getElementById('area5');

                var intervalID = window.setInterval(function(){
                    area5.innerHTML += "CountDown : "+count--;

                    // setTimeout(function(){
                    //     clearInterval(intervalID);
                    //     area5.innerHTML = "종료!!";
                    // },10000);

                    if(count < 0){
                        clearInterval(intervalID);
                        area5.innerHTML += "종료!!";
                    }
                 },1000);
                 area5.innerHTML += "hello";
            }
        </script>
    </body>
</html>


BOM

* screen 객체
client 운영체제 화면에 대한 속성 값을 가지는 객체

- 속성
height : 화면 높이
width : 화면 너비
availWidth : 실제 화면에서 사용 가능한 너비
availHeight : 실제 화면에서 사용 가능한 높이
colorDepth : 사용 가능한 색상수
pixelDept : 한 픽셀 당 비트 수

<h3>screen 객체</h3>
        <p>웹 브라우저 화면이 아닌 운영체제 화면의 속성을 가지는 객체</p>
        <button onclick="test6()">실행확인</button>
        <div id='area6' class='area'></div>
        <script>
            function test6(){
                var area6 = document.getElementById('area6');
                area6.innerHTML += "화면 높이 : "+screen.height+"<br>";
                area6.innerHTML += "화면 너비 : "+screen.width+"<br>";
                area6.innerHTML += "실제 화면에서 사용 가능한 높이 : "+screen.availHeight+"<br>";
                area6.innerHTML += "실제 화면에서 사용 가능한 너비 : "+screen.availWidth+"<br>";
                area6.innerHTML += "사용 가능한 색상 수 : "+screen.colorDepth+"<br>";
                area6.innerHTML += "한 픽셀당 비트 수 : "+screen.pixelDepth+"<br>";

                child = window.open("","","width=800,height=500");
                child.resizeTo(screen.width,screen.height);

                setInterval(function(){
                    child.resizeBy(-20,-20); // 현재 크기에서 -20씩 작아져라 
                    child.moveBy(10,10); // 현재 위치에서 움직여라
                },500);
            }
        </script>



* location 객체
브라우저의 주소 표시줄(URL)과 관련된 객체로
프로토콜 종류, 호스트 이름, 문서 위치 등의 정보를 가짐

- 속성
hash : 앵커 이름(#~)
host : 호스트 이름과 포트번호
hostname : 호스트 이름
href : 문서 URL 주소
origin : 호스트이름, 프로토콜, 포트번호
pathname : 디렉토리 경로
port : 포트번호
protocol : 프로토콜의 종류
search : 요청 매개변수(?~~)

- 메소드
assign('주소') : 새로운 페이지 로드 ( 뒤로 가기 가능 )
reload : 현재 문서를 다시 로드 ( 현재 위치에서 새로고침 ) 
replace('주소') : 현재페이지를 새 페이지로 교체 ( 뒤로 가기 불가 )

        <h3>location 객체</h3>
        <p>브라우저 주소 표시줄과 관련된 객체</p>
        <button onclick="test7()">실행 확인</button>
        <div id='area7' class='area-big'></div>
        <script>
            function test7(){
                var area7 = document.getElementById('area7');
                for(var key in location){
                    area7.innerHTML += key+" : "+location[key]+"<br>";
                }
            }
        </script>
        <button onclick="location='http://www.naver.com'">네이버</button>
        <button onclick="location.href='http://www.naver.com'">네이버</button>
        <br><br>
        <button onclick="location = location">새로고침</button>
        <button onclick="location.href = location.href">새로고침</button>
        <button onclick="location.href = location">새로고침</button>
        <button onclick="location = location.href">새로고침</button>
        <!-- reload()는 현재 위치에서 새로고침 -->
        <button onclick="location.reload()">새로고침</button>
        <br><br>
        <button onclick="location.assign('http://google.com')">구글</button>
        <button onclick="location.replace('http://google.com')">구글</button>
        <br><br>
        <button onclick="history.go(-1)">이전페이지</button> 
        <button onclick="history.back()">이전페이지</button> 



* navigator 객체
브라우저에 대한 정보를 가지는 객체
웹페이지를 실행하고 있는 브라우저에 대한 정보를 가지고 있는 객체 (현재 페이지에 대한 것)


- 속성
appCodeName : 브라우저 코드명
appName : 브라우저 이름
appVersion : 브라우저 버전
platform : 사용중인 운영체제
useAgent : 브라우저 전체정보
cookieEnabled : 쿠키가능성을 확인(true/false)
geolocation : 위도와 경도를 출력 
language : 브라우저 언어
online : 브라우저가 온라인/오프라인 환경인지 확인(true/false)
product : 브라우저 엔진이름


      <h3>navigator 객체</h3>
        <p>웹페이지를 실행하고 있는 브라우저에 대한 정보를 가지고 있는 객체(현재 페이지에 대한 것)</p>
        <button onclick="test8();">실행 확인</button>
        <div id="area8" class="area-big"></div>
        <script>
            function test8(){
                var area8 = document.getElementById('area8');
                for(var key in navigator){
                    area8.innerHTML += key+" : "+navigator[key]+"<br>";
                }
            }
        </script>



DOM

* DOM(Document Object Model)
HTML에 있는 태그를 객체화하여 자바스크립트에서 다룰 수 있게 한 것으로
모든 노드 객체에 접근할 수 있는 요소와 메소드 제공

- 노드
HTML에 있는 태그를 구조화(트리)하였을 때 각각의 태그가 노드
- 요소 노드와 텍스트 노드
요소 노드(Elements Node) : 태그 그 자체 의미
텍스트 노드(Text Node) : 태그에 기록되어 있는 문자
(텍스트 노드를 가지는 태그(h?, p 등)와 가지지 않는 태그(img 등)가 있음

w3schools.com의 references 참조


* 텍스트 노드 있는 문서 객체 작성
요소 노드와 텍스트 노드를 생성하고 이를 body노드의 자식으로 포함 가능

요소노드 생성 -> 텍스트 노드 생성 -> 요소 노드에 텍스트 노드 추가 -> body객체에 요소 노드 추가

- 메소드
document.createElement(태그명) : 요소노드 생성
document.createTextNode(내용) : 텍스트노드 생성
객체명.appendChild(node) : 태그에 자손으로 노드를 추가 


* 텍스트 노드가 없는 문서 객체 작성
요소 노드 생성하고 속성을 설정한 후 이를 body노드의 자식으로 포함 가능

요소노드 생성 -> 생성된 노드 속성 설정 -> body객체에 요소 노드 추가

- 메소드
객체명(변수).속성=속성값 : 태그 속성값 설정
객체명.setAttribute(속성명, 속성값) : 태그에 속성값 설정
객체명.getAttribute(속성명) : 태그 속성확인
객체명.appendChild(node) : 태그에 자손으로 노드를 추가 


* 문서 스타일 수정
style 객체를 이용하여 문서의 스타일 변경

객체 명.style.속성 명 = 속성 값;
(자바스크립트에서 식별자에 '-'를 쓰지 못하기 때문에
속성 명이 CSS에서 쓰는 것과 다른 부분이 있음 (ex. background-color -> backgroundColor))


<!DOCTYPE html>
<html>
    <head>
        <title>DOM</title>
        <style>
            .area-big{
                height: 300px;
                background-color: lightgray;
                border: 1px solid black;
            }
            .area{
                height: 200px;
                background-color: lightgray;
                border: 1px solid black;
            }
        </style>
    </head>
    <body>
        <h1>DOM(Document Object Model)</h1>
        <hr>
        <h3>텍스트 노드가 있는 노드 생성</h3>
        <button onclick="test1();">실행 확인</button>
        <div id="area1" class="area"></div>
        <script>
            function test1(){
                // 요소 노드 생성
                var title = document.createElement("h3");
                // 텍스트 노드 생성
                var textNode = document.createTextNode("안녕~! 눈이 와~~요~");
                // 노드 연결
                title.appendChild(textNode);
                // body에 요소 노드 추가
                document.getElementById('area1').appendChild(title);
                
                // 위 내용 다른 방법으로 추가
                // document.getElementById('area1').innerHTML = "<h3>안녕~! 눈이 와~~요~</h3>";
            }
        </script>
        <hr>
        <h3>텍스트 노드가 없는 노드 생성</h3>
        <button onclick="test2();">실행 확인</button>
        <div id="area2" class="area"></div>
        <script>
            function test2(){
                // img 태그 생성
                var imgTest = document.createElement('img');
                // 속성 지정
                imgTest.src = "../images/top_logo.jpg";
                imgTest.width = "150";
                imgTest.height = "100";

                // body에 요소 노드 추가
                document.getElementById('area2').appendChild(imgTest);
            }
        </script>
        <hr>
        <h3>innerHTML</h3>
        <button onclick="test3();">실행 확인</button>
        <div id="area3" class="area"></div>
        <script>
            function test3(){
                document.getElementById('area3').innerHTML += "안녕하세요~!";
                var str = "<table border=1>";
                    str += "<tr><th>이름</th><th>나이</th></tr>";
                    str += "<tr><td>홍길동</td><td>20</td></tr>";
                    str += "<tr><td>김길동</td><td>25</td></tr>";
                    str += "</table>";
                document.getElementById('area3').innerHTML += str;
                }
        </script>
        <hr>

        <h3>스타일 지정</h3>
        <button onclick="test4();">실행 확인</button>
        <div id="area4" class="area"></div>
        <script>
            function test4(){
                var area4 = document.getElementById('area4');
                area4.style.backgroundColor = "orangered";
                area4.style.borderRadius = "50px";
                area4.style.transition = "all 2s";
            }
        </script>
        <hr>
        
        <h3>노드 삭제</h3>
        <button onclick="test5();">실행 확인</button>
        <div id="area5" class="area"></div>
        <script>
            function test5(){
                var area5 = document.getElementById('area5');
                area5.remove();

                // 한줄로 사용
                // document.getElementById('area5').remove();
            }
        </script>
    </body>
</html>


---------------------------------------------------------------------------------------------------

이벤트

* 이벤트
- 이벤트 활용
이벤트 속성과 이벤트 핸들러(함수)를 연동하여
이벤트 발생 시 특정 기능을 하도록 하는 것

- 이벤트 설정 방법
고전 이벤트 모델
인라인 이벤트 모델
표준 이벤트 모델
마이크로소프트 인터넷 익스플로러 이벤트 모델

- 고전 이벤트 모델
요소 객체가 갖고 있는 이벤트 속성에 이벤트 핸들러를 연결하는 방법으로
이벤트 객체를 제거할 땐 속성 값에 null을 넣어주면 됨
이벤트 발생 객체는 핸들러 내부에서 this로 표현(스타일 변경 가능)
매개 변수로 이벤트 정보 전달(e, window.event) *이벤트 객체 전달

ex. 클릭 시 이벤트 설정
var h = document.getElementById('id명');
h.onclick = function(){
	수행 기능 설정;
	h(this).onclick = null; // 한 번만 실행
};
onclick -> 클릭했을 때


- 인라인 이벤트 모델
요소 내부에 이벤트를 작성하는 방식으로
인라인 방식은 <script>태그에 있는 함수를 호출하는 방식 선호

ex. 클릭 시 이벤트 설정
<h1 onclick='처리로직'></h1>
또는
<h1 onclick='스크립트 내 함수 호출'></h1>


- 표준 이벤트 모델
W3C에서 공식적으로 지정한 이벤트 모델
한 번에 여러 개 이벤트 핸들러 설정 가능
this 키워드가 이벤트 발생 객체를 의미함

ex. 클릭 시 이벤트 설정
var h = document.getElementById('id명');
h.addEventListener('click', function(){수행 기능 설정;});
-> 이벤트를 만들어줌, click이라는 이름, function()기능을 실행하겠다. 

- 메소드
addEventListenerI(이벤트이름, 핸들러, 확장) 
removeEventListener(이벤트이름, 핸들러) : 이벤트 삭제 


* 기본 이벤트 제거 / 유효성 검사
- 기본 이벤트 : 태그 중 이벤트 핸들러를 기본적으로 가지고 있는 것
(<a>, <input type="submit"> 입력 양식에서 많이 사용
- 유효성 검사 : 사용자가 입력한 데이터가 양식에 맞는지 검사 ex. 비밀번호 확인

- 기본 이벤트 제거
onsubmit 이벤트 속성에 이벤트 핸들러 연결할 때 return false; 함
true가 넘어오면 이벤트 핸들러가 수행


- 유효성 검사
이벤트 핸들러에 데이터 비교 후 맞지 않으면 false 리턴
(정규식 문서 참고)

<!DOCTYPE html>
<html>
    <head>
        <title>이벤트</title>
        <style>
            .area-big{
                height: 300px;
                background-color: lightgray;
                border: 1px solid black;
            }
            .area{
                height: 200px;
                background-color: lightgray;
                border: 1px solid black;
            }
        </style>
    </head>
    <body>
        <h1>이벤트</h1>
        <hr>
        <h3>고전 이벤트 모델</h3>
        <button id="test1">test1() 실행 확인</button>
        <button id="test2">test2() 실행 확인</button>
        <div id="area1" class="area"></div>
        <script>
            var test1 = document.getElementById('test1');
            var test2 = document.getElementById('test2');
            var area1 = document.getElementById('area1');
            test1.onclick = function(){
                area1.innerHTML += "test1() 실행됨<br>";
            }
            test2.onclick = function(){
                area1.innerHTML += "test2() 실행됨 - test1() 이벤트 제거<br>";
                test1.onclick = null; // 특정 이벤트 제거하고 싶으면 null을 넣으면 된다.
                this.onclick = null; // 자기 자신 이벤트 제거
            }
        </script>
        <hr>

        <h3>이벤트 발생 객체 제어</h3>
        <button id="test3">test3() 실행 확인</button>
        <div id="area3" class="area"></div>
        <script>
            var test3 = document.getElementById('test3');

            test3.onclick = function(){
                document.getElementById('area3').innerHTML += "안녕하세요";
                
                this.style.backgroundColor = "red";
                this.style.color = "white";
            }
        </script>
        <hr>

        <h3>인라인 이벤트 모델</h3>
        <button onclick="test4();">실행 확인</button>
        <div id="area4" class="area"></div>
        <script>
            function test4(){
                document.getElementById('area4').innerHTML += "test4() 실행됨<br>";
            }
        </script>
        <hr>

        <h3>기본 이벤트 제거 / 유효성 검사</h3>
        <form name="join" id="join" action="winObject02.html">
            <input type="text" name="u_name" id="u_name" placeholder="이름"><br>
            <input type="text" name="u_id" id="u_id" placeholder="아이디"><br>
            <input type="password" name="u_pw1" id="u_pw1" placeholder="비밀번호"><br>
            <input type="password" name="u_pw2" id="u_pw2" placeholder="비밀번호 확인"><br>
            <input type="submit" value="가입요청" onclick="return test5();">
        </form>
        <div id="area5" class="area"></div>
        <script>
            function test5(){
                var area5 = document.getElementById('area5');
                // form 요소에 접근하는 방법 
                    // id로 요소 찾아서 접근
                var name = document.getElementById('u_name').value;
                area5.innerHTML += name;
                // form 에 설정한 name 으로 접근
                area5.innerHTML += document.join.u_id.value; // join이라는 놈 중에 u_id이름 가진놈의 value
                
                // 비밀번호 같은지 확인
                if(document.join.u_pw1.value != document.join.u_pw2.value){
                    alert('비밀번호가 일치하지 않습니다.');
                    document.join.u_pw2.focus();
                    document.join.u_pw2.select(); // u_pw2 값을 선택하도록
                    return false;
                }
                return true;
            }
        </script>
    </body>
</html>
